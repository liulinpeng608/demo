<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/data/jpa 
		http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">
<!-- 引入项目配置文件 -->
	<!-- <context:property-placeholder location="classpath:config.properties" /> -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 第一步骤  配置数据源 -->
	
<!-- 阿里 druid数据库连接池 -->
	<!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
        数据库基本信息配置
        <property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="filters" value="${filters}" />  
   		 最大并发连接数
         <property name="maxActive" value="${maxActive}" />
         初始化连接数量
         <property name="initialSize" value="${initialSize}" />
         配置获取连接等待超时的时间
         <property name="maxWait" value="${maxWait}" />
         最小空闲连接数
         <property name="minIdle" value="${minIdle}" />  
   		 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
         <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
         配置一个连接在池中最小生存的时间，单位是毫秒
         <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${validationQuery}" />  
         <property name="testWhileIdle" value="${testWhileIdle}" />  
         <property name="testOnBorrow" value="${testOnBorrow}" />  
         <property name="testOnReturn" value="${testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
         打开removeAbandoned功能
         <property name="removeAbandoned" value="${removeAbandoned}" />
         1800秒，也就是30分钟
         <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
         关闭abanded连接时输出错误日志   
         <property name="logAbandoned" value="${logAbandoned}" />
	</bean> -->
	
	<!-- 数据源配置, 不使用连接池 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
     <!--dataSource属性指定要用到的连接池-->
     <property name="dataSource" ref="dataSource"/>
     <!--configLocation属性指定mybatis的核心配置文件-->
<!--     <property name="configLocation" value="classpath:mybatis_config.xml" />-->
     <!-- 所有配置的mapper文件 -->
<!--      <property name="mapperLocations" value="classpath*:com/yzit/plateform/mapper/*.xml" /> -->
     <property name="mapperLocations">
			 <list>
			  	<value>classpath*:com/yzit/plateform/mapper/*.xml</value>
			 </list>
		</property>
  </bean>
  
  <!-- mybatis扫描包，生成该接口的代理实现类，并交给spring管理 -->
  <bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
  	<property name="basePackage" value="com.yzit.plateform.dao"></property>
  </bean>
  
    <!-- 事务控制 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation注解方式配置事务 -->
<!-- 	<tx:annotation-driven transaction-manager="transactionManager" /> -->
	
	<!-- AOP配置事物 -->
  	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
			<tx:method name="batchDel*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置AOP切面 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.yzit.plateform.service..*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
</beans>